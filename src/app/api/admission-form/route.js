import { NextResponse } from "next/server";
import { getCollection } from "@/lib/mongoClient"; // ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ MongoDB helper function
import { connectDB } from "@/lib/connectDb";
import admissionForm from "@/model/admissionForm";
import { UploadImage } from "@/cloudinary/cloudUpload";
import { ObjectId } from "mongodb";
import cloudinary from "@/cloudinary/cloudConfig";
import notification from "@/model/notification";

export async function POST(request) {
    try {
        const formData = await request.formData();

        // ‡¶è‡¶ñ‡¶æ‡¶®‡ßá File ‡¶Ö‡¶¨‡¶ú‡ßá‡¶ï‡ßç‡¶ü ‡¶Ü‡¶≤‡¶æ‡¶¶‡¶æ ‡¶ï‡¶∞‡ßá ‡¶®‡¶ø‡¶§‡ßá ‡¶π‡¶¨‡ßá
        const photoFile = formData.get("photo");
        const documentFile = formData.get("documents");

        // ‡¶¨‡¶æ‡¶ï‡¶ø‡¶ó‡ßÅ‡¶≤‡ßã string ‡¶´‡¶ø‡¶≤‡ßç‡¶°
        const newStudent = Object.fromEntries(formData.entries());

        const documentsType = documentFile && documentFile.type.startsWith("image") ? "image" : "raw";

        const [photoResult, documentResult] = await Promise.all([
            UploadImage(photoFile, "image", "admission"),
            UploadImage(documentFile, documentsType, "admission"),
        ]);



        await connectDB();

        const saveNotification = new notification({
            title: 'üë®‚Äçüéì ‡¶®‡¶§‡ßÅ‡¶® ‡¶≠‡¶∞‡ßç‡¶§‡¶ø ‡¶Ü‡¶¨‡ßá‡¶¶‡¶®!',
        });
        await saveNotification.save();

        const saveForm = new admissionForm({
            student: {
                photo_url: photoResult.secure_url,
                photo_id: photoResult.public_id,
                nameBn: newStudent.nameBn,
                nameEn: newStudent.nameEn,
                gender: newStudent.gender,
                dob: new Date(newStudent.dob),
                birthCertificateNo: newStudent.birthCertificateNo,
                class: newStudent.class,
                mobile: newStudent.mobile,
                address: newStudent.address,
            },
            father: {
                nameBn: newStudent["‡¶™‡¶ø‡¶§‡¶æ‡¶∞_nameBn"],
                nameEn: newStudent["‡¶™‡¶ø‡¶§‡¶æ‡¶∞_nameEn"],
                nid: newStudent["‡¶™‡¶ø‡¶§‡¶æ‡¶∞_nid"],
                mobile: newStudent["‡¶™‡¶ø‡¶§‡¶æ‡¶∞_mobile"],
                occupation: newStudent["‡¶™‡¶ø‡¶§‡¶æ‡¶∞_occupation"],
                income: Number(newStudent["‡¶™‡¶ø‡¶§‡¶æ‡¶∞_income"]),
            },
            mother: {
                nameBn: newStudent["‡¶Æ‡¶æ‡¶§‡¶æ‡¶∞_nameBn"],
                nameEn: newStudent["‡¶Æ‡¶æ‡¶§‡¶æ‡¶∞_nameEn"],
                nid: newStudent["‡¶Æ‡¶æ‡¶§‡¶æ‡¶∞_nid"],
                mobile: newStudent["‡¶Æ‡¶æ‡¶§‡¶æ‡¶∞_mobile"],
                occupation: newStudent["‡¶Æ‡¶æ‡¶§‡¶æ‡¶∞_occupation"],
                income: Number(newStudent["‡¶Æ‡¶æ‡¶§‡¶æ‡¶∞_income"]),
            },
            guardian: {
                name: newStudent.guardian_name,
                nid: newStudent.guardian_nid,
                mobile: newStudent.guardian_mobile,
                occupation: newStudent.guardian_occupation,
            },
            others: {
                file_url: documentResult.secure_url,
                url_id: documentResult.public_id,
                file_type: documentsType,
            },
        });

        await saveForm.save();

        return NextResponse.json({ success: true, message: "‡¶°‡¶æ‡¶ü‡¶æ ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶ú‡¶Æ‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá" });

    } catch (error) {
        console.error("Admission Form Error:", error);
        return NextResponse.json({ success: false, message: "‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá!" }, { status: 500 });
    }
}

// GET ‚Äì ‡¶∏‡¶¨ ‡¶°‡¶æ‡¶ü‡¶æ ‡¶™‡¶æ‡¶ì‡ßü‡¶æ
export async function GET() {
    try {
        const collection = await getCollection("admissionforms");
        const students = await collection.find({}).toArray();

        return NextResponse.json({ success: true, message: students });
    } catch (error) {
        console.error("Fetch Admission Data Error:", error);
        return NextResponse.json({ success: false, message: "‡¶°‡¶æ‡¶ü‡¶æ ‡¶Ü‡¶®‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø!" }, { status: 500 });
    }
}

export async function DELETE(request) {
    try {
        const { id, photo_id, document_id, dc_type } = await request.json();

        const files = [
            { id: photo_id, type: "image" },
            { id: document_id, type: dc_type },
        ];

        for (const file of files) {
            if (file.id) {
                await cloudinary.uploader.destroy(file.id, {
                    resource_type: file.type,
                });
            }
        }

        const collection = await getCollection("admissionforms");
        await collection.deleteOne({ _id: new ObjectId(id) });

        return NextResponse.json({ success: true, message: '‡¶°‡¶æ‡¶ü‡¶æ ‡¶Æ‡ßÅ‡¶õ‡ßá ‡¶´‡ßá‡¶≤‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá' });
    } catch (error) {
        console.error("Fetch Admission Data Error:", error);
        return NextResponse.json({ success: false, message: "‡¶°‡¶æ‡¶ü‡¶æ ‡¶Ü‡¶®‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø!" }, { status: 500 });
    }
}

export async function PUT(request) {
    try {
        const { id } = await request.json();
        const collection = await getCollection("admissionforms");
        await collection.findOneAndUpdate(
            { _id: new ObjectId(id) },
            { $set: { status: "accepted" } },
        );

        return NextResponse.json({ success: true, message: '‡¶Ü‡¶¨‡ßá‡¶¶‡¶® ‡¶ó‡ßÉ‡¶π‡ßÄ‡¶§ ‡¶π‡ßü‡ßá‡¶õ‡ßá' });

    } catch (error) {
        console.error("Fetch Admission Data Error:", error);
        return NextResponse.json({ success: false, message: "‡¶°‡¶æ‡¶ü‡¶æ ‡¶Ü‡¶®‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø!" }, { status: 500 });
    }
}
